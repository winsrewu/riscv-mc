import ./ascii_to_binary.js
import ./num_to_binary_array.js

# control characters are all ignored, except for \n and \t
# \n will flush the buffer and call 'say' command once
# \t will be replaced by 4 spaces
# char 32 - 126 will be put into the buffer
# char 127 will be ignored
# other chars will be replaced by '?'
# for instant buffer, \n will be ignored

function onload minecraft:load {
    data modify storage ascii:tmp buffer set value ""
    data modify storage ascii:tmp input_buffer set value ""
    data modify storage ascii:tmp inst_buffer set value ""
    
    scoreboard objectives add ascii dummy
}

# tmp example:
# digits: [...] (8 bit length array)

# result:
# -
function process_digits {
    data modify storage bitops:tmp c_digits set from storage ascii:tmp digits
    function bitops:left_pad_32
    data modify storage bitops:tmp a_digits set from storage bitops:tmp digits
    function bitops:to_num
    REPEAT (0, 255) as i {
        IF i == 10 {
            execute if data storage bitops:tmp {num: 10L} run {
                function *flush_buffer
            }
        } ELSE {
            execute if data storage bitops:tmp {num: <%i%>L} run { with storage ascii:tmp
                $data modify storage ascii:tmp buffer set value "$(buffer)<% get_should_print(i) %>"
            }
        }
    }
}


# tmp example:
# digits: [...] (8 bit length array)

# result:
# -
function process_digits_inst {
    data modify storage bitops:tmp c_digits set from storage ascii:tmp digits
    function bitops:left_pad_32
    data modify storage bitops:tmp a_digits set from storage bitops:tmp digits
    function bitops:to_num
    REPEAT (0, 255) as i {
        execute if data storage bitops:tmp {num: <%i%>L} run { with storage ascii:tmp
            $data modify storage ascii:tmp inst_buffer set value "$(inst_buffer)<% get_should_print(i) %>"
        }
    }
}

function clear_inst_buffer {
    data modify storage ascii:tmp inst_buffer set value ""
}

function flush_buffer {
    block { with storage ascii:tmp
        $say $(buffer)
    }
    data modify storage ascii:tmp buffer set value ""
}

# tmp example:
# -

# result:
# digits: [...] (8 bit length array, if input_buffer is not empty)
# digits: None (if input_buffer is empty)
function get_digits {
    data remove storage ascii:tmp digits
    scoreboard players set #flag ascii 1

    execute unless data storage ascii:tmp {input_buffer: ""} run {
        data modify storage ascii:tmp ch set string storage ascii:tmp input_buffer 0 1
        REPEAT (0, 255) as i {
            IF is_printable(i) && is_legal(i) {
                execute if score #flag ascii matches 1 run {
                    execute if data storage ascii:tmp {ch: "<% get_corresponding_char(i) %>"} run {
                        data modify storage ascii:tmp digits set value <% from_num(i, 8) %>
                        scoreboard players set #flag ascii 0
                    }
                }   
            }
            IF is_printable(i) && !is_legal(i) {
                execute if score #flag ascii matches 1 run {
                    execute if data storage ascii:tmp {ch: "\<% get_corresponding_char(i) %>"} run {
                        data modify storage ascii:tmp digits set value <% from_num(i, 8) %>
                        scoreboard players set #flag ascii 0
                    }
                }   
            }
        }
        data modify storage ascii:tmp input_buffer set string storage ascii:tmp input_buffer 1
    }
}

function test {
    REPEAT (["H", "e", "l", "l", "o", ",", "W", "o", "r", "l", "d", "!", "\n"]) as i {
        say <% char_to_num(i) %>
        data modify storage ascii:tmp digits set value <% from_num(char_to_num(i), 8) %>
        function *process_digits
    }
}